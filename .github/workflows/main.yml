name: BlackRock BTC Tracker

on:
  schedule:
    - cron: '0 * * * *'  # Se ejecuta al inicio de cada hora, todos los días
  workflow_dispatch:

jobs:
  run:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Restore last date from cache
      id: cache-last-date
      uses: actions/cache@v3
      with:
        path: date_cache.txt
        key: last-btc-date-v1

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run script
      id: script
      env:
        TWITTER_API_KEY: fAtUAee6ERA07Yi4thoRKRmle
        TWITTER_API_SECRET: X96zLhhEoH5a5dilOOqAk1TjWBwB14qGNBiRz49jwJThNv2oTp
        TWITTER_ACCESS_TOKEN: AIJuV5SaMZKytQB2g2blXciBuS3E4T
        TWITTER_ACCESS_TOKEN_SECRET: HuwKuloMtNujiOpZjue76kvZkYUdp9CSyiBKiW77cIKbs
      run: |
        set -e  # Detener en caso de error
        
        # Leer la fecha del archivo de caché si existe
        if [ -f "date_cache.txt" ]; then
          LAST_DATE=$(cat date_cache.txt)
          echo "[DEBUG] Última fecha en caché: $LAST_DATE"
        else
          LAST_DATE=""
          echo "[INFO] No se encontró fecha en caché, será la primera ejecución"
        fi
        
        # Exportar la variable para el script de Python
        echo "LAST_DATE=$LAST_DATE" >> $GITHUB_ENV
        
        # Crear directorio de salida si no existe
        mkdir -p output_images
        
        # Ejecutar el script y mostrar la salida en tiempo real
        echo "[INFO] Ejecutando script..."
        python main.py || {
          echo "[ERROR] El script falló con código de salida $?"
          exit 1
        }
        
        # Verificar si hay una nueva fecha para guardar
        if [ -f "$GITHUB_OUTPUT" ] && grep -q '^LAST_DATE=' "$GITHUB_OUTPUT"; then
          # Leer la fecha del archivo de salida
          NEW_DATE=$(grep '^LAST_DATE=' "$GITHUB_OUTPUT" | cut -d= -f2-)
          if [ -n "$NEW_DATE" ]; then
            echo "[INFO] Nueva fecha obtenida: $NEW_DATE"
            # Guardar en caché
            echo "$NEW_DATE" > date_cache.txt
            echo "should-save-cache=true" >> $GITHUB_OUTPUT
          else
            echo "[INFO] No se generó una fecha válida para guardar en caché"
          fi
        else
          echo "[INFO] No se encontró nueva fecha en la salida del script"
        fi

    - name: Save date to cache
      if: steps.script.outputs.should-save-cache == 'true'
      uses: actions/cache/save@v3
      with:
        path: date_cache.txt
        key: last-btc-date-v1
